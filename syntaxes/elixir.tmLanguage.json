{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Elixir",
    "scopeName": "source.elixir",
    "patterns": [
        {
            "include": "#interpolated_elixir"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#string"
        },
        {
            "include": "#entity"
        },
        {
            "include": "#invalid"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#meta"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#support"
        },
        {
            "include": "#type"
        },
        {
            "include": "#variable"
        }
    ],
    "repository": {
        "escaped_char": {
            "patterns": [
                {
                    "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                    "name": "constant.character.escape.elixir"
                }
            ]
        },
        "interpolated_elixir": {
            "patterns": [
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.section.embedded.elixir"
                        },
                        "1": {
                            "name": "source.elixir.embedded.source.empty"
                        }
                    },
                    "match": "#\\{(\\})",
                    "name": "source.elixir.embedded.source"
                },
                {
                    "begin": "#\\{",
                    "captures": {
                        "0": {
                            "name": "punctuation.section.embedded.elixir"
                        }
                    },
                    "end": "\\}",
                    "name": "source.elixir.embedded.source",
                    "patterns": []
                }
            ]
        },
        "nest_brackets": {
            "begin": "\\[",
            "end": "\\]",
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.elixir"
                }
            },
            "patterns": [
                {
                    "include": "#nest_brackets"
                }
            ]
        },
        "nest_curly": {
            "begin": "\\{",
            "end": "\\}",
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.elixir"
                }
            },
            "patterns": [
                {
                    "include": "#nest_curly"
                }
            ]
        },
        "nest_curly_and_self": {
            "patterns": [
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "captures": {
                        "0": {
                            "name": "punctuation.section.scope.elixir"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#nest_curly_and_self"
                        }
                    ]
                },
                {
                    "include": "$self"
                }
            ]
        },
        "nest_ltgt": {
            "begin": "\\<",
            "end": "\\>",
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.elixir"
                }
            },
            "patterns": [
                {
                    "include": "#nest_ltgt"
                }
            ]
        },
        "regex_sub": {
            "name": "string.interpolated.regexp.elixir",
            "patterns": [
                {
                    "include": "#interoplated_elixir"
                },
                {
                    "include": "#escaped_char"
                },
                {
                    "name": "string.regexp.arbitrary-repitition.elixir",
                    "match": "(\\{)\\d+(,\\d+)?(\\})",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.arbitrary-repitition.elixir"
                        },
                        "3": {
                            "name": "punctuation.definition.arbitrary-repitition.elixir"
                        }
                    }
                },
                {
                    "name": "string.regexp.character-class.elixir",
                    "begin": "\\[(?:\\^?\\])?",
                    "end": "\\]",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.character-class.elixir"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#escaped_char"
                        }
                    ]
                },
                {
                    "name": "string.regexp.group.elixir",
                    "begin": "\\(",
                    "end": "\\)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.group.elixir"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#regex_sub"
                        }
                    ]
                },
                {
                    "name": "comment.line.number-sign.elixir",
                    "comment": "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.",
                    "begin": "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)",
                    "end": "$\\n?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.elixir"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.elixir"
                        }
                    }
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "comment": "@doc with interpolated heredocs",
                    "name": "comment.documentation.heredoc.elixir",
                    "begin": "@(module|type)?doc (~s)?\"\"\"",
                    "end": "\\s*\"\"\"",
                    "patterns": [
                        {
                            "include": "#interoplated_elixir"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ]
                },
                {
                    "comment": "@doc with interpolated single quoted heredocs",
                    "name": "comment.documentation.heredoc.elixir",
                    "begin": "@(module|type)?doc ~s'''",
                    "end": "\\s*'''",
                    "patterns": [
                        {
                            "include": "#interoplated_elixir"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ]
                },
                {
                    "comment": "@doc with heredocs is treated as documentation",
                    "name": "comment.documentation.heredoc.elixir",
                    "begin": "@(module|type)?doc ~S\"\"\"",
                    "end": "\\s*\"\"\"",
                    "patterns": [
                        {
                            "include": "#escaped_char"
                        }
                    ]
                },
                {
                    "comment": "@doc with heredocs is treated as documentation",
                    "name": "comment.documentation.heredoc.elixir",
                    "begin": "@(module|type)?doc ~S'''",
                    "end": "\\s*'''",
                    "patterns": [
                        {
                            "include": "#escaped_char"
                        }
                    ]
                },
                {
                    "comment": "@doc false is treated as documentation",
                    "name": "comment.documentation.false",
                    "match": "@(module|type)?doc false"
                },
                {
                    "comment": "@doc with string is treated as documentation",
                    "begin": "@(module|type)?doc \"",
                    "end": "\"",
                    "name": "comment.documentation.string",
                    "patterns": [
                        {
                            "include": "#interoplated_elixir"
                        },
                        {
                            "include": "#escaped_char"
                        }
                    ]
                },
                {
                    "name": "comment.line.number-sign.elixir",
                    "begin": "#",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.elixir"
                        }
                    }
                },
                {
                    "match": "\\b_([\\w]+[?!]?)",
                    "name": "comment.unused.elixir"
                },
                {
                    "match": "\\b_\\b",
                    "name": "comment.wildcard.elixir"
                }
            ]
        },
        "constant": {
            "patterns": [
                {
                    "name": "constant.language.elixir",
                    "match": "\\b(nil|true|false)\\b(?![?!])"
                },
                {
                    "name": "constant.numeric.elixir",
                    "comment": "matches questionmark-letters.\n\nexamples (1st alternation = hex):\n?\\x1     ?\\x61\n\nexamples (2nd alternation = octal):\n?\\0      ?\\07     ?\\017\n\nexamples (3rd alternation = escaped):\n?\\n      ?\\b\n\nexamples (4th alternation = meta-ctrl):\n?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a\n\nexamples (4th alternation = normal):\n?a       ?A       ?0\n?*       ?\"       ?(\n?.       ?#\n\n\nthe negative lookbehind prevents against matching\np(42.tainted?)",
                    "match": "(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])"
                },
                {
                    "name": "constant.numeric.elixir",
                    "match": "\\b(0[xX]\\h(?>_?\\h)*|\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?|0[bB][01]+)\\b"
                },
                {
                    "comment": "symbols",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.constant.elixir"
                        }
                    },
                    "match": "(?<!:)(:)(?>[a-zA-Z_][\\w@]*(?>[?!]|=(?![>=]))?|\\<\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\-|\\|>|=>|~|~=|=|/|\\\\\\\\|\\*\\*?|\\.\\.?\\.?|>=?|<=?|&&?&?|\\+\\+?|\\-\\-?|\\|\\|?\\|?|\\!|@|\\%?\\{\\}|%|\\[\\]|\\^(\\^\\^)?)",
                    "name": "constant.other.symbol.elixir"
                }
            ]
        },
        "entity": {
            "patterns": [
                {
                    "name": "entity.name.function.elixir",
                    "match": "[a-zA-Z0-9_?!]+(?=[(])"
                },
                {
                    "captures": {
                        "1": {
                            "name": "keyword.control.module.elixir"
                        },
                        "2": {
                            "name": "entity.name.type.module.elixir"
                        }
                    },
                    "match": "^\\s*(defmodule)\\s+(([A-Z]\\w*\\s*(\\.)\\s*)*[A-Z]\\w*)"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "keyword.control.elixir",
                    "match": "(?<!\\.)\\b(do|end|case|bc|lc|for|if|cond|with|unless|try|receive|fn|defmodule|defprotocol|defimpl|defrecordp?|defstruct|defdelegate|defcallback|defexception|defoverridable|defguardp?|exit|after|rescue|catch|else|raise|throw|quote|unquote|super|when|and|or|not|in)\\b(?![?!])"
                },
                {
                    "name": "keyword.control.elixir",
                    "match": "(?<=do)[:]"
                },
                {
                    "name": "keyword.control.elixir",
                    "match": "(?<!\\.)\\b(test)\\b(?![?!])"
                },
                {
                    "name": "keyword.other.special-method.elixir",
                    "match": "(?<!\\.)\\b(alias|require|import|use)\\b(?![?!])"
                },
                {
                    "comment": "Function without parameters",
                    "match": "\\b(defp?|defmacrop?)\\b\\s*([_$a-z][$\\w]*[!?]?)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.elixir"
                        },
                        "2": {
                            "name": "entity.name.function.elixir"
                        }
                    }
                },
                {
                    "comment": " as above, just doesn't need a 'end' and does a logic operation",
                    "name": "keyword.operator.elixir",
                    "match": "(?<!\\.)\\b(and|not|or|when|xor|in|inlist|inbits)\\b"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "match": "->",
                    "name": "keyword.operator.arrow.elixir"
                },
                {
                    "match": "=>",
                    "name": "keyword.operator.big-arrow.elixir"
                },
                {
                    "match": "\\|>",
                    "name": "keyword.operator.pipe.elixir"
                },
                {
                    "match": "=",
                    "name": "keyword.operator.assignment.elixir"
                },
                {
                    "match": "(\\|\\|\\||&&&|\\^\\^\\^|<<<|>>>|~~~)",
                    "name": "keyword.operator.bitwise.elixir"
                },
                {
                    "comment": "matches: | ++ -- ** \\ <- <> << >> :: .. |> => -> <|> <~> <~ <<~ ~> ~>>",
                    "match": "\\+\\+|\\-\\-|\\*\\*|\\\\\\\\|\\<\\-|<\\<\\~|\\<\\>|\\<\\<|\\>\\>|\\:\\:|\\.\\.|\\|>|=>|<\\|\\>|<~>|->|~>>|~>|<~|(?<!\\|)\\|(?!\\|)",
                    "name": "keyword.operator.other.elixir"
                },
                {
                    "match": "===?|!==?|<=?|>=?|=~",
                    "name": "keyword.operator.comparison.elixir"
                },
                {
                    "match": "(?<=[ \\t])!+|\\bnot\\b|&&|\\band\\b|\\|\\||\\bor\\b|\\bxor\\b",
                    "name": "keyword.operator.logical.elixir"
                },
                {
                    "match": "(\\*|\\+|\\-|/)",
                    "name": "keyword.operator.arithmetic.elixir"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": "\\;",
                    "name": "punctuation.separator.statement.elixir"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.object.elixir"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.separator.method.elixir"
                },
                {
                    "match": "\\{|\\}",
                    "name": "punctuation.section.scope.elixir"
                },
                {
                    "match": "\\[\\]|\\[|\\]",
                    "name": "punctuation.section.array.elixir"
                },
                {
                    "match": ":",
                    "name": "punctuation.separator.other.elixir"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "comment": "triple quoted string (allows for interpolation)",
                    "name": "string.quoted.triple.elixir",
                    "begin": "\"\"\"",
                    "end": "\"\"\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.elixir"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.elixir"
                        }
                    },
                    "patterns": [
                        {
                            "captures": {
                                "0": {
                                    "name": "punctuation.section.embedded.elixir"
                                },
                                "1": {
                                    "name": "source.elixir.embedded.source.empty"
                                }
                            },
                            "match": "#\\{(\\})",
                            "name": "source.elixir.embedded.source"
                        },
                        {
                            "begin": "#\\{",
                            "captures": {
                                "0": {
                                    "name": "punctuation.section.embedded.elixir"
                                }
                            },
                            "end": "\\}",
                            "name": "source.elixir.embedded.source",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        {
                            "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                            "name": "constant.character.escape.elixir"
                        }
                    ]
                },
                {
                    "comment": "single quoted string (allows for interpolation)",
                    "name": "support.function.variable.quoted.single.elixir",
                    "begin": "'",
                    "end": "'|\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.elixir"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.elixir"
                        }
                    },
                    "patterns": [
                        {
                            "captures": {
                                "0": {
                                    "name": "punctuation.section.embedded.elixir"
                                },
                                "1": {
                                    "name": "source.elixir.embedded.source.empty"
                                }
                            },
                            "match": "#\\{(\\})",
                            "name": "source.elixir.embedded.source"
                        },
                        {
                            "begin": "#\\{",
                            "captures": {
                                "0": {
                                    "name": "punctuation.section.embedded.elixir"
                                }
                            },
                            "end": "\\}",
                            "name": "source.elixir.embedded.source",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        {
                            "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                            "name": "constant.character.escape.elixir"
                        }
                    ]
                },
                {
                    "comment": "double quoted string (allows for interpolation)",
                    "name": "string.quoted.double.elixir",
                    "begin": "\"",
                    "end": "\"|\\n",
                    "patterns": [
                        {
                            "captures": {
                                "0": {
                                    "name": "punctuation.section.embedded.elixir"
                                },
                                "1": {
                                    "name": "source.elixir.embedded.source.empty"
                                }
                            },
                            "match": "#\\{(\\})",
                            "name": "source.elixir.embedded.source"
                        },
                        {
                            "begin": "#\\{",
                            "captures": {
                                "0": {
                                    "name": "punctuation.section.embedded.elixir"
                                }
                            },
                            "end": "\\}",
                            "name": "source.elixir.embedded.source",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        {
                            "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
                            "name": "constant.character.escape.elixir"
                        }
                    ]
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.function.elixir"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.function.elixir"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        },
                        {
                            "name": "variable.other.param.elixir",
                            "match": "[a-zA-Z]([a-zA-Z0-9_]+)?"
                        }
                    ]
                },
                {
                    "name": "variable.other.access.elixir",
                    "match": "([a-zA-Z_][a-zA-Z0-9_]+)(?=\\[)"
                },
                {
                    "name": "variable.other.readwrite.module.elixir",
                    "match": "(@)[a-zA-Z_]\\w*",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.variable.elixir"
                        }
                    }
                },
                {
                    "name": "variable.other.elixir",
                    "match": "[a-zA-Z_]\\w+(?=:)"
                },
                {
                    "name": "variable.other.elixir",
                    "match": "[a-zA-Z_]\\w+(?=\\s=)"
                },
                {
                    "name": "variable.other.anonymous.elixir",
                    "match": "(&)\\d*",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.variable.elixir"
                        }
                    }
                },
                {
                    "name": "variable.language.elixir",
                    "match": "\\b(__(CALLER|ENV|MODULE|DIR)__)\\b(?![?!])"
                },
                {
                    "match": "(%)?\\b([A-Z]\\w+)\\b",
                    "captures": {
                        "1": {
                            "name": "variable.other.constant.elixir"
                        },
                        "2": {
                            "name": "variable.other.constant.elixir"
                        }
                    }
                }
            ]
        }
    }
}