{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Elixir",
  "scopeName": "source.elixir",
  "patterns": [
    // { "include": "#escaped_char" },
    { "include": "#interpolated_elixir" },
    { "include": "#constant" },
    { "include": "#comment" },
    { "include": "#string" },
    { "include": "#entity" },
    { "include": "#invalid" },
    { "include": "#keyword" },
    { "include": "#meta" },
    { "include": "#operator" },
    { "include": "#punctuation" },
    { "include": "#storage" },
    { "include": "#support" },
    { "include": "#type" },
    { "include": "#variable" },
  ],
  "repository": {
    "escaped_char": {
      "patterns": [
        {
          "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
          "name": "constant.character.escape.elixir"
        }
      ],
    },
    "interpolated_elixir": {
      "patterns": [
        {
          "captures": {
            "0": {"name": "punctuation.section.embedded.elixir"},
            "1": {"name": "source.elixir.embedded.source.empty"}
          },
          "match": "#\\{(\\})",
          "name": "source.elixir.embedded.source"
        },
        {
          "begin": "#\\{",
          "captures": {
            "0": {"name": "punctuation.section.embedded.elixir"}
          },
          "end": "\\}",
          "name": "source.elixir.embedded.source",
          "patterns": [
            // {"include": "#nest_curly_and_self"},
            // {"include": "$self"}
          ]
        }
      ]
    },
    "nest_brackets": {
      "begin": "\\[",
        "end": "\\]",
      "captures": {"0": {"name": "punctuation.section.scope.elixir"}},
      "patterns": [{"include": "#nest_brackets"}],
    },
    "nest_curly": {
      "begin": "\\{",
        "end": "\\}",
      "captures": {"0": {"name": "punctuation.section.scope.elixir"}},
      "patterns": [{"include": "#nest_curly"}],
    },
    "nest_curly_and_self": {
      "patterns": [
        {
          "begin": "\\{",
            "end": "\\}",
          "captures": {"0": {"name": "punctuation.section.scope.elixir"}},
          "patterns": [{"include": "#nest_curly_and_self"}]
        },
        {"include": "$self"}
      ]
    },
    "nest_ltgt": {
      "begin": "\\<",
      "end": "\\>",
      "captures": {"0": {"name": "punctuation.section.scope.elixir"}},
      "patterns": [{"include": "#nest_ltgt"}]
    },
    // "nest_parens": {
    //   "begin": "\\(",
    //   "end": "\\)",
    //   "captures": {"0": {"name": "punctuation.section.scope.elixir"}},
    //   "patterns": [{"include": "#nest_parens"}]
    // },
    "regex_sub": {
      "name": "string.interpolated.regexp.elixir",
      "patterns": [
        {"include": "#interoplated_elixir"},
        {"include": "#escaped_char"},
        {
          "name": "string.regexp.arbitrary-repitition.elixir",
          "match": "(\\{)\\d+(,\\d+)?(\\})",
          "captures": {
            "1": {"name": "punctuation.definition.arbitrary-repitition.elixir"},
            "3": {"name": "punctuation.definition.arbitrary-repitition.elixir"}
          }
        },
        {
          "name": "string.regexp.character-class.elixir",
          "begin": "\\[(?:\\^?\\])?",
          "end": "\\]",
          "captures": {"0": {"name": "punctuation.definition.character-class.elixir"}},
          "patterns": [{"include": "#escaped_char"}]
        },
        {
          "name": "string.regexp.group.elixir",
          "begin": "\\(",
          "end": "\\)",
          "captures": {"0": {"name": "punctuation.definition.group.elixir"}},
          "patterns": [{"include": "#regex_sub"}]
        },
        {
          "name": "comment.line.number-sign.elixir",
          "comment": "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.",
          "begin": "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)",
          "end": "$\\n?",
          "beginCaptures": {"1": {"name": "punctuation.definition.comment.elixir"}},
          "endCaptures": {"0": {"name": "punctuation.definition.comment.elixir"}},
        }
      ]
    }
  },
}
